C 요약정리


1)C언어개요
	컴퓨터 시스템에서 사용되는 프로그래밍 언어

2)C언어의 기초
	C언어는 널리사용되고 시스템 프로그래밍에 잘 어울리는 컴퓨터 언어
	장점 :	다양한 프로그램의 이식성이 좋음
	       	복잡하지 않아 유지보수가 쉬움
		프로그램의 크기가 작고 실행속도가 빠름
	단점 :   	고급언어보다 접근성이 떨어짐
		시스템을 직접제어, 프로그래밍하는데 세심한 주의 필요

3) C프로그래밍
	알고리즘을 작성, 실행

4) C프로그램의 특징
	기본단위 함수, 각명령문은 ; 으로 끝남, 대소문자 구분, 자유형식(free-format)

5)printf()함수
	출력함수, 여러종류의 데이터를 서식에 맞춰 출력할 수 있게함

6) scanf()함수
	입력함수, 다양한 데이터를 서식에 맞춰 입력 받을 수 있게함

7) 변수
	데이터를 저장하기 위해 프로그램에 의해 이름을 할당받는 메모리 공간
	데이터를 저장할 수 있는 메모리공간이며, 이렇게 지정된 값은 변경될 수 있음

8) 상수
	변수와 마찬가지로 데이터를 저장할 수 있는 공간, 단 프로그램이 실행되는 동안 저장된 데이터는 변경할 수 없음
	

9) 기본타입
	정수, 실수, 문자형의 타입
	정수 : 소숫점이 없는 수
	실수 : 소숫점이 있는 수
	데이터자료형
	- int (4byte)	: 정수
	- float (4byte)	: 실수
	- char(acter) (1byte)	: 문자
	- bool	(1byte) : 0(false) or 1(true)

10) 타입 변환
	묵시적 타입 변환 - 대입 연산, 산술 연산에서 C컴파일러가 자동으로 실행해주는 타입 변환
	명시적 타입 변환 - 타입캐스트 연산자를 사용하여 강제적으로 수행하는 타입 변환

11) 산술 연산자
	사칙연산을 기본으로 가장 많이 사용되는 연산자
	+, -, *, / %(나머지)

12) 대입 연산자
	변수에 값을 대입할때 사용하는 연산자

13)증감 연산자
	피연산자를 1씩증가 혹은 1씩 감소시킬 떄 사용하는 연산자
	이 연산자는 피연산자가 다 한나뿐임

14) 비교 연산자
	피연산자 사이의 상대적은 크기를 판단하는 연산자
	같음 ==, != 같지않음, >, <. =>, =<

15) 논리 연산자
	참과 거짓을 결정하는 연산자
	&& = and, || = or

16) 비트 연산자
	비트(bit) 단위로 논리 연산을 할 떄 사용하는 연산자

17) 기타 연산자
	삼항 연산자는 다른언어에는 존재하지 않는 C언어만의 연산자

18) 조건문
	주어진 조건식의 결과에 따라 별도의  명령을 수행하도록 제어하는 명령어
	기본이 되는 if문

19)반복문
	같은 명령을 일정 횟 수 만큼 반복하여 수행하게 제어하는 명령문

20) 기타 제어문
	continue문 - 반복문 내에서 특정 조건에 대한 예외처리
	ex) 1부터 100까지 정수 중에서 3의 배수를 제외하고 출력
	break문 - 조건식의 판단 결과에 상관없이 반복문을 빠져나갈때 사용
	ex) 1부터 10까지의 합

21) C언어 함수
	목적 수행을 위해 설계된 코드의 집합
	프로그램들은 함수로 구성, 프로그램 코드, 사용하는 이유는 반복적인 프로그램을 피할 수 있게,

22) 변수의 유효 범위
	변수 선언 위치에 따라 해당 변수의 유효 범위, 메모리 반환 시기, 초기화 여부, 저장되는 장소등이 변경

23) 재귀 호출
	함수내에서 함수가 자기 자신을 또 다시 호출하는 행위
	끝없이 반복하므로 중단하도록 조건이 변경 될 명령문을 반드시 포함하여야함

24) 1차원 배열
	같은 타입의 변수들로 이루어진 유한 집합
	배을 구성하는 각각의 값을 배열요소(element)라고 함
	배열의 위치를 가리키는 숫자는 인덱스(index)라고 함

25) 다차원 배열
	2차원 이상의 배열을 의미, 배열요소로 또 다른 배열을 가지는 것

26) 포인터의 개념

	데이터 주소값 = 해당 데이터가 저장된 메모리의 시작 주소
	int 형 데이터 = 4bye, 데이터의 주소값은 시작주소 1byte만을 가리킴
	포인터= 메모리의 주소값을 저장하는 변수

27) 포인터 연산
	포인터 값을 증가시키거나 감소시키는 것만 됨
	포인터끼리의 덧셈, 곱셈, 나눗셈은 의미 X
	포인터에 정수를 더하거나 뺄 수는 있음, 실수와의 연산 X

28) 인수 전달 방법
	함수에 인수를 전달하는 2가지방법
	1. 값에 의한 전달 -  변수가 가지는 값을 함수내의 매개변수에 복사?
	2. 참조에 의한 전달 - 원본데이터를 직접 전달?

29) 다양한 포인터
	?

30) 포인터와 배열의 관계
	- 솔직히 뭔말인지 모르겠습니다

31) 포인터 배열과 배열 포인터
	- 솔직히 뭔말인지 모르겠습니다

32) 메모리의 구조
	프로그램이 실행되기 위해 로드되는곳 + 프로그램에서 사용되는 변수들을 저장
	구조 1.코드 영역 2. 데이터 영역 3. 스택영역 4.힙 영역
	
33) 스택프레임
	- ?

34) 메모리의 동적 할당
	- 프로그램이 실행되는 도중에 메모리를 할당 받는것

35) 기본적인 입출력
	stream - 데이터 입출력의 흐름, 가상의 연결고리?
	키보드로 타자를 쳤을때 그 타자가 모니터에 표현되게끔 연결해주는 기능?

36) 문자 입출력 함수
	- ?

37) 문자열
	끈 따옴표로 표현한 문자열 "이것"
	문자열 상수 - 문자열의 내용을 변경할 수 없음

38) 문자열의 입출력 함수
	C언어에 문자열을 입력하거나 출력하는 함수 

39) 문자열 처리 함수
	다양한 연산자를 사용 할 수 없음
	별도로 제공되는 함수를 사용

40) 구조체의 기본
	C언어 타입에서 사용자가 새롭게 정의한 타입

41) 포인터의 구조체
	- ?

42) 구조체의 활용
	

43) 공용체와 열거체
	공용체 (union) 구조체와 같으나 멤버 변수가 하나의 메모리를 공유?

44) 콘솔 입출력
	buffer
	문자를 묶어서 전달함
	버퍼링
	1. 완전버퍼링 - 버퍼가 가득차면 전달
	2. 라인버퍼링 - 개행문자가 나타날 때마다 전달

45) 파일 입출력
	File - 정보를 담음
	종류
	1. 바이너리 파일 - 0과1로 인코딩된 파일 
	2. 텍스트파일 - 사람이 볼 수 있는 문자열로 이루어진 파일

46) 파일 입출력 함수
	fgetc() 지정된 스트림으로부터 하나의 문자를 읽어드림
	fputc() 지정된 스트림으로부터 하나의 문자를 출력함

47) 선행처리기
	#으로 시작하는 문자 #include
	컴파일 하기 좋도록 소스를 재구성

48) 매크로 함수
	함수 처럼 동작하는 매크로? 

49) 미리 정의된 매크로
	미리 정의된 매크로 제공

50) 헤더파일
	함수를 사용하기전에 함수 원형이 선언되어야함
	표준 함수 의 원형과 관련된 다양한 정보를 가지고 있는 파일
	자신만의 헤더 파일을 만들수 있음

51) 분할 컴파일
	모듈 - 프로그램 구성요소, 관련데이터 + 함수를 하나로 묶은단위
	소스파일을 여러개로 나누어 개발하는 방식

52) 조건부 컴파일

53) 바이트 저장 순서
	컴퓨터는 데이터를 2진수로 표현,처리
	bit(비트)란 데이터의 최소단위
	byte(바이트)는 비트8개가 모여 구성됨 - 한 문자를 표현하는 최소 단위
	저장의 2가지 방식
	빅 엔디안 (선형방식) 숫자순서대로
	리틀 엔디안 (반대임)

54) 비트 단위 연산
	컴퓨터가 알아먹기 쉬움, 메모리공간을 줄이거나 성능향상

55) 음수의 표현
	1의 보수법 - 모든비트를 반전하여 음수 표현
	단 -0 과 +0이 존재
	2의 보수법 - 1의보수법에 1을 더하여 음수 표현
	
56) 실수의 표현
	2가지 방식
	1. 고정 소수점 방식 - 정수 / 실수 부분을 나누고 표현,단 정수부와 소수부의 자릿수가 크지 않으므로 표현범위 적음
	2. 부동 소수점 방식 - 실수를 가수부와 지수부로 나누어 표현, 매우큰수까지 표현 가능
		ㄴ 대부분 부동 소수점 방식을 사용
------------------------------------------------------------------------------------------------------------------------------------

C++

1) C++ 개요
	기존의 C언어에 여러가지 기능 추가

2) C++기초
	C언어에서 절자 지향적 특징을 가져옴
	객체 지향적 , 일반화 프로그래밍 언어

3) C++ 프로그래밍
	알고리즘으로 목적에 맞게 프로그래밍언어를 사용하여 작성
	소스파일작성 > 선챙처리 > 컴파일러 > 링크 > 실행파일 생성

4) C++ 프로그램
	항상 main()함수로 실행시작
	명령문은 항상 ; 으로 끝내야함
	반환(return)문 함수종료 의미

5) iostream
	C++프로그램과 사용자 사이의 입출력을 담당하는 수단은 객체여야함	
	cout 객체 - 출력스트림
	cin 객체 - 입력스트림

6) C++11/14 변경사항
	1. 초기화 리스트 및 초기화 방법의 통합
	2. 새로운 타입의 추가 : long long형 정수
	3. 새로운 스마트 포인터 추가 : 
	4. 널 포인터 상수 추가 : nullptr
	5. 열거체의 범위 지정
	6. 자동 타입 변환 : auto
	7. 타입 변환 연산자 추가 : explicit
	8. 범위 기반 for 문 추가
	9. 람다 함수와 람다 표현식 추가

7) 변수
	데이터를 저장하기 위해 프로그램에 의해 이름을 할당받는 메모리 공간
	데이터를 저장할 수 있는 메모리공간이며, 이렇게 지정된 값은 변경될 수 있음

8) 상수
	변수와 마찬가지로 데이터를 저장할 수 있는 공간, 단 프로그램이 실행되는 동안 저장된 데이터는 변경할 수 없음

9) 기본타입
	정수, 실수, 문자형의 타입
	정수 : 소숫점이 없는 수
	실수 : 소숫점이 있는 수
	데이터자료형
	- int (4byte)	: 정수
	- float (4byte)	: 실수
	- char(acter) (1byte)	: 문자
	- bool	(1byte) : 0(false) or 1(true)

10) 부동 소수점 수
	2가지 방식
	1. 고정 소수점 방식 - 정수 / 실수 부분을 나누고 표현,단 정수부와 소수부의 자릿수가 크지 않으므로 표현범위 적음
	2. 부동 소수점 방식 - 실수를 가수부와 지수부로 나누어 표현, 매우큰수까지 표현 가능

11) 타입 변환
	묵시적 타입 변환 - 대입 연산, 산술 연산에서 C컴파일러가 자동으로 실행해주는 타입 변환
	명시적 타입 변환 - 타입캐스트 연산자를 사용하여 강제적으로 수행하는 타입 변환

12) 산술 연산자
	사칙연산을 기본으로 가장 많이 사용되는 연산자
	+, -, *, / %(나머지)

13) 대입 연산자
	변수에 값을 대입할때 사용하는 연산자

14) 증감 연산자
	피연산자를 1씩증가 혹은 1씩 감소시킬 떄 사용하는 연산자
	이 연산자는 피연산자가 다 한나뿐임

15) 비교 연산자
	피연산자 사이의 상대적은 크기를 판단하는 연산자
	같음 ==, != 같지않음, >, <. =>, =<

16) 논리 연산자
	참과 거짓을 결정하는 연산자
	&& = and, || = or

17) 비트 연산자
	비트(bit) 단위로 논리 연산을 할 떄 사용하는 연산자

18) 기타 연산자
	삼항 연산자는 다른언어에는 존재하지 않는 C언어만의 연산자

19) C++ 연산자
	범위 지정 연선자(::) - 우선순위가 가장 높음 / 식별하고 구분하는 연산자
	멤버 포인터 연산자 
	1. 왼쪽의 피연산자가 클래스 타입의 객체인 경우 : .*
	2. 왼쪽의 피연산자가 클래스 타입의 객체를 가리키는 포인터인 경우 : ->*
	typeid 연산자
	객체 타입에 관한 정보 확인 / 런타임 객체의 타입 결정

20) 조건문
	주어진 조건식의 결과에 따라 별도의  명령을 수행하도록 제어하는 명령어
	기본이 되는 if문

21)반복문
	같은 명령을 일정 횟 수 만큼 반복하여 수행하게 제어하는 명령문

22) 기타 제어문
	continue문 - 반복문 내에서 특정 조건에 대한 예외처리
	ex) 1부터 100까지 정수 중에서 3의 배수를 제외하고 출력
	break문 - 조건식의 판단 결과에 상관없이 반복문을 빠져나갈때 사용
	ex) 1부터 10까지의 합

23) 1차원 배열
	같은 타입의 변수들로 이루어진 유한 집합
	배을 구성하는 각각의 값을 배열요소(element)라고 함
	배열의 위치를 가리키는 숫자는 인덱스(index)라고 함

24) 다차원 배열
	2차원 이상의 배열을 의미, 배열요소로 또 다른 배열을 가지는 것

25) 포인터의 개념

	데이터 주소값 = 해당 데이터가 저장된 메모리의 시작 주소
	int 형 데이터 = 4bye, 데이터의 주소값은 시작주소 1byte만을 가리킴
	포인터= 메모리의 주소값을 저장하는 변수

26) 포인터 연산
	포인터 값을 증가시키거나 감소시키는 것만 됨
	포인터끼리의 덧셈, 곱셈, 나눗셈은 의미 X
	포인터에 정수를 더하거나 뺄 수는 있음, 실수와의 연산 X

27) 메모리의 동적 할당
	프로그램이 실행되는 도중에 메모리를 할당 받는것

28) 문자열
	C언어 스타일의 문자열
	- 끈 따옴표로 표현한 문자열 "이것"
	- 문자열 상수 - 문자열의 내용을 변경할 수 없음

29) string 클래스
	C++에서 새롭게 추가된 기능,문자형 배열보다 사용 편리 

30) string 메소드
	string 클래스에 정의된 문자열을 작업할 때 사용

31) 구조체의 기본
	C++언어 타입에서 사용자가 새롭게 정의한 타입
	복잡한 데이터 표현,

32) 구조체의 활용
	...?

33) 공용체와 열거체
	공용체 (union) 구조체와 같으나 멤버 변수가 하나의 메모리를 공유?

34) 함수의 정의
	목적 수행을 위해 설계된 코드의 집합
	프로그램들은 함수로 구성, 프로그램 코드, 사용하는 이유는 반복적인 프로그램을 피할 수 있게,

35) 인수 전달 방법
	함수에 인수를 전달하는 2가지방법
	1. 값에 의한 전달 -  변수가 가지는 값을 함수내의 매개변수에 복사?
	2. 참조에 의한 전달 - 원본데이터를 직접 전달?

36) 재귀 호출
	함수내에서 함수가 자기 자신을 또 다시 호출하는 행위
	끝없이 반복하므로 중단하도록 조건이 변경 될 명령문을 반드시 포함하여야함

37) 함수 포인터
	함수의 시작 주소를 가리키는 포인터 상수 

38) 참조자
	특정 변수의 실제 이름 대신 사용	

39) 디폴트 인수
	기본값이 미리 정의 된 인수

40) 함수 오버로딩
	같은 이름의 함수를 중복 정의

41) 인라인 함수
	함수 호출은 복잡한 과정이므로 시간이 오래걸림
	인라인 함수는 일반적인 함수 호출과정을 거치지 않고 함수의 모든 코드를 호출된 자리에 바로 삽입하는 방식
	시간이 절약됨, 단 여러 이점을 포기

42) 유효 범위와 연결
	유효 범위(scope)
	해당 번수가 사용될 수 있는 범위
	연결(linkage)
	변수를 사용,접근가능한 권리
	
43) 네임스페이스
	변수, 함수 ,구조체등 서로 구분하기 위해 내부 식별자를 보유
	프로그램이 복잡해지면 내부 식별자간 충돌 우려, 그러므로 내부 식별자에 사용될 유효 범위를 제공하는 영역
	
	

